name: LaTeX Compiler

on:
  push:
    paths: ['**.tex', '**.bib', '**.cls', '**.sty', '**.yml', '**.yaml']
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Cache TeX Live
      id: cache-texlive
      uses: actions/cache@v4
      with:
        path: ~/texlive
        key: texlive-basic-2025-v2-${{ hashFiles('**/*.tex', '**/*.sty', '**/*.cls') }}
        restore-keys: |
          texlive-basic-2025-v2-
          texlive-basic-2025-
    
    - name: Check cache status and skip install if present
      id: check-texlive
      shell: bash
      run: |
        echo "=========================================="
        echo "Checking TeX Live Installation Status"
        echo "=========================================="
        
        if [ -d "$HOME/texlive" ]; then
          YEAR=$(ls "$HOME/texlive" 2>/dev/null | grep -E '^20[0-9][0-9]$' | sort -r | head -1)
          if [ -n "$YEAR" ]; then
            BIN_DIR=$(find "$HOME/texlive/$YEAR/bin" -type d -name "*-linux" 2>/dev/null | head -1)
            if [ -n "$BIN_DIR" ] && [ -f "$BIN_DIR/pdflatex" ]; then
              echo "Valid TeX Live $YEAR installation found"
              echo "SKIP_INSTALL=true" >> "$GITHUB_OUTPUT"
              echo "TEXLIVE_YEAR=$YEAR" >> "$GITHUB_OUTPUT"
              echo "BIN_DIR=$BIN_DIR" >> "$GITHUB_OUTPUT"
            else
              echo "TeX Live directory incomplete"
              echo "SKIP_INSTALL=false" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "No TeX Live year directory found"
            echo "SKIP_INSTALL=false" >> "$GITHUB_OUTPUT"
          fi
        else
          echo "No TeX Live directory in cache"
          echo "SKIP_INSTALL=false" >> "$GITHUB_OUTPUT"
        fi
        echo "=========================================="
    
    - name: Install TeX Live to user directory
      if: steps.check-texlive.outputs.SKIP_INSTALL != 'true'
      shell: bash
      run: |
        echo "=========================================="
        echo "Installing fresh TeX Live..."
        echo "=========================================="
        
        mkdir -p ~/texlive-temp
        cd ~/texlive-temp
        
        wget -q http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
        tar -xzf install-tl-unx.tar.gz
        
        INSTALL_DIR=$(find . -name "install-tl-2*" -type d | head -1)
        cd "$INSTALL_DIR"
        
        YEAR=$(date +%Y)
        
        cat > texlive.profile << 'ENDPROFILE'
        selected_scheme scheme-basic
        TEXDIR ~/texlive/CURRENTYEAR
        TEXMFCONFIG ~/texlive/CURRENTYEAR/texmf-config
        TEXMFHOME ~/texlive/CURRENTYEAR/texmf
        TEXMFLOCAL ~/texlive/CURRENTYEAR/texmf-local
        TEXMFSYSCONFIG ~/texlive/CURRENTYEAR/texmf-config
        TEXMFSYSVAR ~/texlive/CURRENTYEAR/texmf-var
        TEXMFVAR ~/texlive/CURRENTYEAR/texmf-var
        option_adjustrepo 1
        option_autobackup 1
        option_desktop_integration 0
        option_doc 0
        option_file_assocs 0
        option_fmt 1
        option_letter 0
        option_menu_integration 0
        option_path 0
        option_post_code 1
        option_src 0
        option_sys_bin ~/texlive/CURRENTYEAR/bin
        option_sys_info ~/texlive/CURRENTYEAR/share/info
        option_sys_man ~/texlive/CURRENTYEAR/share/man
        option_w32_multi_user 0
        ENDPROFILE
        
        sed -i "s/CURRENTYEAR/$YEAR/g" texlive.profile
        
        ./install-tl -profile texlive.profile
        
        BIN_DIR=$(find ~/texlive/$YEAR/bin -type d -name "*-linux" | head -1)
        
        if [ -z "$BIN_DIR" ]; then
          echo "Error: Could not find TeX Live bin directory after installation"
          exit 1
        fi
        
        echo "TeX Live installed to: $BIN_DIR"
        
        $BIN_DIR/tlmgr install \
          latexmk \
          amsmath amsfonts amscls \
          graphics xcolor \
          geometry fancyhdr \
          hyperref url
        
        echo "TeX Live basic installation completed!"
    
    - name: Setup TeX Live PATH and verify
      shell: bash
      run: |
        if [ -n "${{ steps.check-texlive.outputs.BIN_DIR }}" ]; then
          BIN_DIR="${{ steps.check-texlive.outputs.BIN_DIR }}"
          echo "Using cached TeX Live from: $BIN_DIR"
        else
          YEAR=$(date +%Y)
          BIN_DIR=$(find ~/texlive/$YEAR/bin -type d -name "*-linux" 2>/dev/null | head -1)
          
          if [ -z "$BIN_DIR" ]; then
            echo "Error: Could not find TeX Live bin directory"
            exit 1
          fi
        fi
        
        echo "$BIN_DIR" >> $GITHUB_PATH
        
        export PATH="$BIN_DIR:$PATH"
        
        echo "=========================================="
        echo "TeX Live Installation Verification"
        echo "=========================================="
        echo "Bin directory: $BIN_DIR"
        echo ""
        
        which pdflatex || echo "ERROR: pdflatex not found"
        pdflatex --version | head -2
        echo ""
        
        which tlmgr || echo "ERROR: tlmgr not found"
        tlmgr --version | head -1
        echo ""
        
        echo "Cache status: ${{ steps.cache-texlive.outputs.cache-hit }}"
        echo "=========================================="
    
    - name: Install Python for texliveonfly
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Install and verify texliveonfly
      shell: bash
      run: |
        YEAR=$(date +%Y)
        BIN_DIR=$(find ~/texlive/$YEAR/bin -type d -name "*-linux" | head -1)
        export PATH="$BIN_DIR:$PATH"
        
        echo "Installing texliveonfly..."
        tlmgr install texliveonfly
        
        SCRIPT_PATH="$BIN_DIR/texliveonfly"
        
        if [ -f "$SCRIPT_PATH" ]; then
          echo "texliveonfly found at: $SCRIPT_PATH"
          chmod +x "$SCRIPT_PATH"
        else
          echo "texliveonfly not found as executable, checking for Python script..."
          SCRIPT_PATH=$(find ~/texlive/$YEAR/texmf-dist/scripts/texliveonfly -name "texliveonfly.py" 2>/dev/null | head -1)
          
          if [ -f "$SCRIPT_PATH" ]; then
            echo "Found Python script at: $SCRIPT_PATH"
            echo '#!/bin/bash' > "$BIN_DIR/texliveonfly"
            echo 'YEAR=$(date +%Y)' >> "$BIN_DIR/texliveonfly"
            echo 'SCRIPT=$(find ~/texlive/$YEAR/texmf-dist/scripts/texliveonfly -name "texliveonfly.py" | head -1)' >> "$BIN_DIR/texliveonfly"
            echo 'python3 "$SCRIPT" "$@"' >> "$BIN_DIR/texliveonfly"
            chmod +x "$BIN_DIR/texliveonfly"
            echo "Created wrapper script"
          else
            echo "ERROR: Could not find texliveonfly script!"
            exit 1
          fi
        fi
        
        if texliveonfly --version 2>&1 | grep -q "texliveonfly"; then
          echo "texliveonfly is working!"
        else
          echo "texliveonfly test inconclusive, will attempt to use anyway"
        fi
    
    - name: Compile LaTeX with automatic package installation
      shell: bash
      run: |
        if [ ! -f "main.tex" ]; then
          echo "Error: main.tex not found!"
          exit 1
        fi
        
        echo "=========================================="
        echo "Compiling main.tex (multiple passes)..."
        echo "=========================================="
        
        # First pass - install packages and generate aux files
        echo "Pass 1: Initial compilation with package installation..."
        if texliveonfly \
          --compiler=pdflatex \
          --arguments="-interaction=nonstopmode -file-line-error -shell-escape" \
          main.tex; then
          echo "Pass 1 completed successfully"
        else
          echo "Pass 1 encountered issues"
          if [ ! -f "main.pdf" ]; then
            echo "FATAL: No PDF generated in first pass"
            tail -50 main.log
            exit 1
          fi
        fi
        
        # Second pass - resolve references, TOC, LOF, LOT
        echo ""
        echo "Pass 2: Resolving cross-references and building TOC..."
        pdflatex -interaction=nonstopmode -file-line-error -shell-escape main.tex
        
        # Third pass - finalize all references
        echo ""
        echo "Pass 3: Final compilation..."
        pdflatex -interaction=nonstopmode -file-line-error -shell-escape main.tex
        
        if [ -f "main.pdf" ]; then
          echo ""
          echo "=========================================="
          echo "Compilation successful after 3 passes!"
          echo "=========================================="
          ls -lh main.pdf
        else
          echo "=========================================="
          echo "FATAL: No PDF generated after compilation"
          echo "=========================================="
          tail -50 main.log
          exit 1
        fi
    
    - name: Process bibliography and finalize
      shell: bash
      run: |
        HAS_BIBLIOGRAPHY=false
        
        if grep -q '\\bibliography{' main.tex || \
           grep -q '\\addbibresource{' main.tex || \
           grep -q '\\printbibliography' main.tex; then
          HAS_BIBLIOGRAPHY=true
        fi
        
        if [ "$HAS_BIBLIOGRAPHY" = true ]; then
          echo "=========================================="
          echo "Bibliography detected - processing..."
          echo "=========================================="
          
          if grep -q '\\usepackage.*biblatex' main.tex || \
             grep -q '\\addbibresource' main.tex; then
            echo "Using biblatex/biber..."
            
            if biber main 2>&1 | tee biber.log; then
              echo "Biber completed successfully"
            else
              echo "Biber encountered issues (this may be normal)"
              cat biber.log
            fi
          else
            echo "Using traditional bibtex..."
            
            if bibtex main 2>&1 | tee bibtex.log; then
              echo "BibTeX completed successfully"
            else
              echo "BibTeX encountered issues (this may be normal)"
              cat bibtex.log
            fi
          fi
          
          echo ""
          echo "Running additional passes after bibliography..."
          
          # Two more passes to resolve bibliography citations
          pdflatex -interaction=nonstopmode -file-line-error -shell-escape main.tex
          pdflatex -interaction=nonstopmode -file-line-error -shell-escape main.tex
          
          echo "Bibliography processing completed"
        else
          echo "=========================================="
          echo "No bibliography detected"
          echo "=========================================="
        fi
        
        if [ -f "main.pdf" ]; then
          echo ""
          echo "=========================================="
          echo "Final PDF Information"
          echo "=========================================="
          ls -lh main.pdf
          file main.pdf
          
          if [ -f "main.log" ]; then
            echo ""
            echo "Warnings summary:"
            grep -i "warning" main.log | head -10 || echo "No warnings found"
          fi
          
          echo "=========================================="
          echo "Compilation complete!"
          echo "=========================================="
        else
          echo "ERROR: Final PDF not found after all compilation steps!"
          exit 1
        fi
    
    - name: Commit PDF
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "LaTeX Compiler Bot"
        
        git pull --rebase origin ${{ github.ref_name }} || {
          echo "Pull failed, attempting to continue..."
        }
        
        git add main.pdf
        
        if ! git diff --staged --quiet; then
          git commit -m "Auto-compile LaTeX: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          MAX_RETRIES=3
          RETRY=0
          SUCCESS=false
          
          while [ $RETRY -lt $MAX_RETRIES ]; do
            if git push; then
              echo "=========================================="
              echo "PDF committed and pushed successfully!"
              echo "=========================================="
              SUCCESS=true
              break
            else
              RETRY=$((RETRY + 1))
              echo "Push failed, attempt $RETRY/$MAX_RETRIES..."
              
              if [ $RETRY -lt $MAX_RETRIES ]; then
                sleep $((RETRY * 2))
                git pull --rebase origin ${{ github.ref_name }} || {
                  echo "Pull failed during retry"
                  exit 1
                }
              fi
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "Failed to push after $MAX_RETRIES attempts"
            exit 1
          fi
        else
          echo "=========================================="
          echo "No changes to commit - PDF is up to date"
          echo "=========================================="
        fi
