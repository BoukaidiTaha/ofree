name: LaTeX Compiler (Optimized)

on:
  push:
    paths: ['**.tex', '**.bib', '**.cls', '**.sty', '**.yml', '**.yaml', 'package-map.json']
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # Step 1: Analyze LaTeX files to determine required packages
    - name: Analyze LaTeX Dependencies
      id: analyze
      run: |
        echo "Analyzing LaTeX package requirements..."
        
        # Extract all \usepackage commands from all .tex files
        PACKAGES=$(find . -name "*.tex" -type f -exec grep -h '\\usepackage\(\[[^]]*\]\)\?{[^}]*}' {} \; | \
                   sed 's/.*\\usepackage\(\[[^]]*\]\)\?{\([^}]*\)}.*/\2/' | \
                   tr ',' '\n' | \
                   sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | \
                   sort -u | \
                   tr '\n' ' ')
        
        echo "Found packages: $PACKAGES"
        echo "latex_packages=$PACKAGES" >> $GITHUB_OUTPUT
        
        # Generate a fingerprint for caching
        FINGERPRINT=$(echo "$PACKAGES" | sha256sum | cut -d' ' -f1)
        echo "Package fingerprint: $FINGERPRINT"
        echo "fingerprint=$FINGERPRINT" >> $GITHUB_OUTPUT
    
    # Step 2: Cache base TeX Live installation
    - name: Cache TeX Live Base
      id: cache-texlive-base
      uses: actions/cache@v4
      with:
        path: ~/texlive
        key: texlive-base-2023-v2
    
    # Step 3: Cache project-specific packages
    - name: Cache Project Packages
      id: cache-packages
      uses: actions/cache@v4
      with:
        path: ~/texlive-packages
        key: texlive-packages-${{ steps.analyze.outputs.fingerprint }}
        restore-keys: |
          texlive-packages-
    
    # Step 4: Install TeX Live base (if not cached)
    - name: Install TeX Live Base
      if: steps.cache-texlive-base.outputs.cache-hit != 'true'
      run: |
        echo "Installing minimal TeX Live base..."
        
        mkdir -p ~/texlive-temp
        cd ~/texlive-temp
        
        wget -q http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
        tar -xzf install-tl-unx.tar.gz
        
        INSTALL_DIR=$(find . -name "install-tl-2*" -type d | head -1)
        cd "$INSTALL_DIR"
        
        cat > texlive.profile << 'EOF'
        selected_scheme scheme-basic
        TEXDIR ~/texlive/2023
        TEXMFCONFIG ~/texlive/2023/texmf-config
        TEXMFHOME ~/texlive/2023/texmf
        TEXMFLOCAL ~/texlive/2023/texmf-local
        TEXMFSYSCONFIG ~/texlive/2023/texmf-config
        TEXMFSYSVAR ~/texlive/2023/texmf-var
        TEXMFVAR ~/texlive/2023/texmf-var
        option_adjustrepo 1
        option_autobackup 0
        option_desktop_integration 0
        option_doc 0
        option_file_assocs 0
        option_fmt 1
        option_letter 0
        option_menu_integration 0
        option_path 0
        option_post_code 1
        option_src 0
        option_sys_bin ~/texlive/2023/bin
        option_sys_info ~/texlive/2023/share/info
        option_sys_man ~/texlive/2023/share/man
        option_w32_multi_user 0
        EOF
        
        ./install-tl -profile texlive.profile
        
        # Install only essential core packages
        ~/texlive/2023/bin/x86_64-linux/tlmgr install \
          latex-bin latexconfig latex-fonts latex \
          tools graphics hyperref url
        
        echo "Base TeX Live installed!"
    
    # Step 5: Create package mapping configuration
    - name: Setup Package Mapping
      run: |
        # Create default package mapping if it doesn't exist
        if [ ! -f "package-map.json" ]; then
          cat > package-map.json << 'EOF'
        {
          "amsmath": "amsmath",
          "amssymb": "amsfonts",
          "amsthm": "amscls",
          "babel": "babel",
          "geometry": "geometry",
          "graphicx": "graphics",
          "tikz": "pgf",
          "pgfplots": "pgfplots",
          "algorithm": "algorithms",
          "algorithmicx": "algorithmicx",
          "algpseudocode": "algorithmicx",
          "listings": "listings",
          "hyperref": "hyperref",
          "xcolor": "xcolor",
          "mathtools": "mathtools",
          "booktabs": "booktabs",
          "array": "tools",
          "longtable": "tools",
          "multirow": "multirow",
          "fancyhdr": "fancyhdr",
          "subcaption": "caption",
          "float": "float",
          "wrapfig": "wrapfig",
          "lipsum": "lipsum",
          "multicol": "tools",
          "enumerate": "tools",
          "tikz-3dplot": "tikz-3dplot",
          "fontspec": "fontspec",
          "polyglossia": "polyglossia",
          "bidi": "bidi",
          "bm": "tools",
          "physics": "physics",
          "siunitx": "siunitx",
          "xpatch": "xpatch",
          "inputenc": "latex",
          "fontenc": "latex",
          "lmodern": "lm",
          "microtype": "microtype",
          "enumitem": "enumitem",
          "caption": "caption",
          "biblatex": "biblatex",
          "natbib": "natbib",
          "cite": "cite",
          "cleveref": "cleveref",
          "glossaries": "glossaries",
          "makeidx": "latex",
          "imakeidx": "imakeidx",
          "pdfpages": "pdfpages",
          "rotating": "rotating",
          "tabularx": "tools",
          "colortbl": "colortbl",
          "xspace": "tools",
          "setspace": "setspace",
          "parskip": "parskip",
          "indentfirst": "tools",
          "appendix": "appendix",
          "titlesec": "titlesec",
          "titletoc": "titletoc",
          "fancybox": "fancybox",
          "mdframed": "mdframed",
          "tcolorbox": "tcolorbox",
          "minted": "minted",
          "soul": "soul",
          "ulem": "ulem",
          "cancel": "cancel",
          "textcomp": "latex",
          "gensymb": "was",
          "wasysym": "wasysym",
          "marvosym": "marvosym",
          "eurosym": "eurosym",
          "pifont": "psnfss",
          "dingbat": "dingbat",
          "ifsym": "ifsym",
          "tipa": "tipa",
          "url": "url",
          "breakurl": "breakurl"
        }
        EOF
        fi
    
    # Step 6: Install adaptive packages
    - name: Install Required Packages Adaptively
      run: |
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        
        # Initialize package tracking
        mkdir -p ~/texlive-packages
        MANIFEST_FILE="$HOME/texlive-packages/manifest-${{ steps.analyze.outputs.fingerprint }}.txt"
        
        # Check if we have a cached manifest for this fingerprint
        if [ -f "$MANIFEST_FILE" ]; then
          echo "Using cached package manifest for fingerprint: ${{ steps.analyze.outputs.fingerprint }}"
          cat "$MANIFEST_FILE"
        else
          echo "Building new package manifest..."
          
          # Parse package mapping
          PACKAGES="${{ steps.analyze.outputs.latex_packages }}"
          
          # Python script to resolve packages
          python3 << 'PYTHON_SCRIPT'
        import json
        import subprocess
        import os
        import sys
        
        # Load package mapping
        with open('package-map.json', 'r') as f:
            package_map = json.load(f)
        
        # Get required packages from environment
        required_packages = os.environ.get('PACKAGES', '').split()
        
        # Resolve to tlmgr packages
        tlmgr_packages = set()
        unknown_packages = []
        
        for pkg in required_packages:
            if pkg in package_map:
                tlmgr_packages.add(package_map[pkg])
            else:
                # Try to use the package name directly
                unknown_packages.append(pkg)
        
        # Check which packages are already installed
        installed = set()
        try:
            result = subprocess.run(
                [os.path.expanduser('~/texlive/2023/bin/x86_64-linux/tlmgr'), 'list', '--only-installed'],
                capture_output=True, text=True, check=True
            )
            for line in result.stdout.splitlines():
                if line.startswith('i '):
                    parts = line.split(':')
                    if parts:
                        installed.add(parts[0].replace('i ', '').strip())
        except:
            pass
        
        # Determine what needs to be installed
        to_install = list(tlmgr_packages - installed) + unknown_packages
        
        if to_install:
            print(f"Installing packages: {' '.join(to_install)}")
            
            # Install in batches to handle failures gracefully
            batch_size = 10
            for i in range(0, len(to_install), batch_size):
                batch = to_install[i:i+batch_size]
                try:
                    subprocess.run(
                        [os.path.expanduser('~/texlive/2023/bin/x86_64-linux/tlmgr'), 'install'] + batch,
                        check=True
                    )
                    print(f"Successfully installed: {' '.join(batch)}")
                except subprocess.CalledProcessError:
                    # Try packages one by one if batch fails
                    for pkg in batch:
                        try:
                            subprocess.run(
                                [os.path.expanduser('~/texlive/2023/bin/x86_64-linux/tlmgr'), 'install', pkg],
                                check=True
                            )
                            print(f"Installed: {pkg}")
                        except:
                            print(f"Failed to install: {pkg} (may not exist or already installed)")
        
        # Save manifest
        manifest_file = os.path.expanduser(f'~/texlive-packages/manifest-${{ steps.analyze.outputs.fingerprint }}.txt')
        with open(manifest_file, 'w') as f:
            f.write('\n'.join(sorted(tlmgr_packages | set(unknown_packages))))
        
        print("Package installation completed!")
        PYTHON_SCRIPT
        fi
        
        # Verify critical packages
        echo "Verifying LaTeX installation..."
        which pdflatex
        pdflatex --version
    
    # Step 7: Compile LaTeX with intelligent retry
    - name: Compile LaTeX Document
      run: |
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        
        if [ ! -f "main.tex" ]; then
          echo "Error: main.tex not found!"
          exit 1
        fi
        
        echo "Starting LaTeX compilation..."
        
        # First pass
        pdflatex -interaction=nonstopmode main.tex || true
        
        # Check for bibliography
        if [ -f "main.aux" ] && grep -q "\\citation\|\\bibdata\|\\bibstyle" main.aux; then
          echo "Processing bibliography..."
          bibtex main || true
          pdflatex -interaction=nonstopmode main.tex || true
        fi
        
        # Final pass for references
        pdflatex -interaction=nonstopmode main.tex || true
        
        # Check if PDF was generated
        if [ -f "main.pdf" ]; then
          echo "✅ Compilation successful!"
          ls -la main.pdf
        else
          echo "❌ Compilation failed. Checking log for missing packages..."
          
          # Extract missing packages from log
          MISSING=$(grep "! LaTeX Error: File \`.*\.sty' not found" main.log | \
                    sed "s/.*File \`\(.*\)\.sty.*/\1/" | sort -u)
          
          if [ -n "$MISSING" ]; then
            echo "Missing packages detected: $MISSING"
            echo "::warning::Missing LaTeX packages: $MISSING. Please update package-map.json"
          fi
          
          # Show relevant error messages
          grep -A 3 "^!" main.log || true
          exit 1
        fi
    
    # Step 8: Commit the PDF
    - name: Commit PDF
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "LaTeX Compiler Bot"
        
        git add main.pdf
        
        if ! git diff --staged --quiet; then
          git commit -m "Auto-compile LaTeX [skip ci] $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "PDF committed successfully!"
        else
          echo "ℹNo changes to commit"
        fi
