name: LaTeX Compiler

on:
  push:
    paths: ['**.tex', '**.bib', '**.cls', '**.sty', '**.yml', '**.yaml', 'package-map.json']
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # Analyze LaTeX files to find required packages
    - name: Analyze LaTeX Dependencies
      id: analyze
      run: |
        echo "Analyzing LaTeX files..."
        
        # Extract all usepackage commands
        PACKAGES=$(find . -name "*.tex" -type f -exec grep -h '\\usepackage' {} \; | \
                   sed -n 's/.*\\usepackage\(\[[^]]*\]\)\?{\([^}]*\)}.*/\2/p' | \
                   tr ',' '\n' | \
                   sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | \
                   sort -u | tr '\n' ' ')
        
        echo "Found packages: $PACKAGES"
        echo "packages=$PACKAGES" >> $GITHUB_OUTPUT
        
        # Create fingerprint for caching
        FINGERPRINT=$(echo "$PACKAGES" | sha256sum | cut -d' ' -f1)
        echo "fingerprint=$FINGERPRINT" >> $GITHUB_OUTPUT
    
    # Cache TeX Live base installation
    - name: Cache TeX Live Base
      id: cache-texlive
      uses: actions/cache@v4
      with:
        path: ~/texlive
        key: texlive-base-v1
    
    # Cache project-specific packages
    - name: Cache Project Packages  
      id: cache-packages
      uses: actions/cache@v4
      with:
        path: ~/texlive-packages
        key: packages-${{ steps.analyze.outputs.fingerprint }}
    
    # Install TeX Live if not cached
    - name: Install TeX Live Base
      if: steps.cache-texlive.outputs.cache-hit != 'true'
      run: |
        echo "Installing TeX Live..."
        mkdir -p ~/texlive-temp && cd ~/texlive-temp
        
        wget -q http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
        tar -xzf install-tl-unx.tar.gz
        cd install-tl-*
        
        cat > texlive.profile << 'EOF'
        selected_scheme scheme-basic
        TEXDIR ~/texlive/2023
        TEXMFCONFIG ~/texlive/2023/texmf-config
        TEXMFHOME ~/texlive/2023/texmf
        TEXMFLOCAL ~/texlive/2023/texmf-local
        TEXMFSYSCONFIG ~/texlive/2023/texmf-config
        TEXMFSYSVAR ~/texlive/2023/texmf-var
        TEXMFVAR ~/texlive/2023/texmf-var
        option_adjustrepo 1
        option_autobackup 0
        option_desktop_integration 0
        option_doc 0
        option_file_assocs 0
        option_fmt 1
        option_letter 0
        option_menu_integration 0
        option_path 0
        option_post_code 1
        option_src 0
        EOF
        
        ./install-tl -profile texlive.profile
        
        # Install minimal required packages
        ~/texlive/2023/bin/x86_64-linux/tlmgr install \
          latex-bin latexconfig latex-fonts latex tools graphics hyperref
        
        cd ~ && rm -rf ~/texlive-temp
    
    # Setup PATH
    - name: Setup PATH
      run: |
        echo "$HOME/texlive/2023/bin/x86_64-linux" >> $GITHUB_PATH
    
    # Create default package-map.json if it doesn't exist
    - name: Ensure package-map.json exists
      run: |
        if [ ! -f "package-map.json" ]; then
          cat > package-map.json << 'EOF'
        {
          "amsmath": "amsmath",
          "amssymb": "amsfonts",
          "amsthm": "amscls",
          "mathtools": "mathtools",
          "bm": "tools",
          "geometry": "geometry",
          "graphicx": "graphics",
          "xcolor": "xcolor",
          "tikz": "pgf",
          "pgfplots": "pgfplots",
          "booktabs": "booktabs",
          "multirow": "multirow",
          "array": "tools",
          "longtable": "tools",
          "algorithm": "algorithms",
          "algorithmicx": "algorithmicx",
          "algpseudocode": "algorithmicx",
          "listings": "listings",
          "hyperref": "hyperref",
          "enumitem": "enumitem",
          "subcaption": "caption",
          "float": "float",
          "wrapfig": "wrapfig",
          "babel": "babel",
          "inputenc": "latex",
          "fontenc": "latex",
          "url": "url",
          "fancyhdr": "fancyhdr",
          "lipsum": "lipsum"
        }
        EOF
        fi
    
    # Install required packages adaptively
    - name: Install Required Packages
      if: steps.cache-packages.outputs.cache-hit != 'true'
      run: |
        mkdir -p ~/texlive-packages
        
        # Python script to handle package installation
        cat > install.py << 'EOF'
        import json
        import subprocess
        import os
        
        # Load package mapping
        with open('package-map.json', 'r') as f:
            package_map = json.load(f)
        
        # Get required packages
        packages = os.environ.get('PACKAGES', '').split()
        
        # Get installed packages
        result = subprocess.run(
            ['tlmgr', 'list', '--only-installed'],
            capture_output=True, text=True
        )
        installed = set()
        for line in result.stdout.splitlines():
            if line.startswith('i '):
                installed.add(line.split(':')[0].replace('i ', '').strip())
        
        # Determine what to install
        to_install = []
        for pkg in packages:
            tlmgr_pkg = package_map.get(pkg, pkg)
            if tlmgr_pkg not in installed:
                to_install.append(tlmgr_pkg)
        
        # Install packages
        if to_install:
            print(f"Installing: {' '.join(to_install)}")
            for pkg in to_install:
                subprocess.run(['tlmgr', 'install', pkg], check=False)
        
        # Save manifest
        with open(f"~/texlive-packages/manifest.txt", 'w') as f:
            f.write('\n'.join(to_install))
        EOF
        
        PACKAGES="${{ steps.analyze.outputs.packages }}" python3 install.py


    - name: Compile LaTeX document
      run: |
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        
        if [ ! -f "main.tex" ]; then
          echo "Error: main.tex not found in repository!"
          exit 1
        fi
        
        echo "Compiling LaTeX document..."
        
        # First compilation
        echo "Running first pdflatex pass..."
        pdflatex -interaction=nonstopmode -halt-on-error main.tex || {
          echo "First compilation failed. Checking log..."
          if [ -f "main.log" ]; then
            echo "Last 50 lines of main.log:"
            tail -50 main.log
          fi
          exit 1
        }
        
        # Check for bibliography and run bibtex if needed
        if ls *.bib 1> /dev/null 2>&1; then
          echo "Bibliography files found, running bibtex..."
          bibtex main || echo "Bibtex had issues, continuing..."
          
          # Second pass after bibtex
          echo "Running second pdflatex pass (after bibtex)..."
          pdflatex -interaction=nonstopmode -halt-on-error main.tex || {
            echo "Second pass failed, but continuing..."
          }
        fi
        
        # Final compilation for cross-references
        echo "Running final pdflatex pass..."
        pdflatex -interaction=nonstopmode -halt-on-error main.tex || {
          echo "Final pass had issues, but checking for PDF..."
        }
        
        # Verify PDF was created
        if [ -f "main.pdf" ]; then
          PDF_SIZE=$(ls -lh main.pdf | awk '{print $5}')
          PDF_PAGES=$(pdfinfo main.pdf 2>/dev/null | grep Pages | awk '{print $2}' || echo "unknown")
          echo "PDF generated successfully!"
          echo "Size: $PDF_SIZE, Pages: $PDF_PAGES"
          ls -la main.pdf
        else
          echo "PDF generation failed!"
          if [ -f "main.log" ]; then
            echo "Error log:"
            tail -100 main.log
          fi
          exit 1
        fi
        
    # Commit PDF
    - name: Commit PDF
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "LaTeX Compiler"
        
        git add main.pdf
        
        if ! git diff --staged --quiet; then
          git commit -m "Auto-compile LaTeX [skip ci]"
          git push
          echo "PDF committed successfully!"
        else
          echo "No changes to commit"
        fi
