name: LaTeX Compiler

on:
  push:
    paths: ['**.tex', '**.bib', '**.cls', '**.sty', '**.yml', '**.yaml']
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Validate LaTeX files
      shell: bash
      run: |
        shopt -s nullglob
        TEX_FILES=(*.tex)
        
        if [ ${#TEX_FILES[@]} -eq 0 ]; then
          echo "Error: No .tex files found in repository root"
          exit 1
        fi
        
        MAIN_COUNT=0
        for file in "${TEX_FILES[@]}"; do
          if grep -q '\\documentclass' "$file"; then
            MAIN_COUNT=$((MAIN_COUNT + 1))
            echo "Found main document: $file"
          fi
        done
        
        if [ $MAIN_COUNT -eq 0 ]; then
          echo "Error: No main LaTeX documents found (no \\documentclass)"
          exit 1
        fi
        
        echo "Validation successful: $MAIN_COUNT main document(s) found"
    
    - name: Detect files needing compilation
      id: detect-changes
      shell: bash
      run: |
        echo "Detecting files needing compilation..."
        echo "========================================================"
        
        FILES_TO_COMPILE=""
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Manual trigger detected: will compile all documents"
          shopt -s nullglob
          for file in *.tex; do
            if grep -q '\\documentclass' "$file"; then
              FILES_TO_COMPILE="$FILES_TO_COMPILE $file"
            fi
          done
        else
          CHANGED_IN_GIT=$(git diff --name-only HEAD^ HEAD 2>/dev/null | grep -E '\.(tex|bib|cls|sty)$' || true)
          
          if [ -z "$CHANGED_IN_GIT" ]; then
            echo "No LaTeX-related files changed in this commit"
            echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
            echo "========================================================"
            exit 0
          fi
          
          echo "Git detected changes in:"
          echo "$CHANGED_IN_GIT"
          echo ""
          echo "Analyzing impact on each document..."
          echo "----------------------------------------"
          
          shopt -s nullglob
          for file in *.tex; do
            if ! grep -q '\\documentclass' "$file"; then
              continue
            fi
            
            NEEDS_COMPILE=false
            REASON=""
            
            if echo "$CHANGED_IN_GIT" | grep -q "^${file}$"; then
              NEEDS_COMPILE=true
              REASON="main file changed"
            fi
            
            if [ "$NEEDS_COMPILE" = "false" ]; then
              INCLUDES=$(grep -E '\\input\{|\\include\{' "$file" 2>/dev/null | sed -E 's/.*\\(input|include)\{([^}]+)\}.*/\2/' || true)
              for inc in $INCLUDES; do
                [[ "$inc" != *.tex ]] && inc="${inc}.tex"
                if echo "$CHANGED_IN_GIT" | grep -q "$inc"; then
                  NEEDS_COMPILE=true
                  REASON="included file $inc changed"
                  break
                fi
              done
            fi
            
            if [ "$NEEDS_COMPILE" = "false" ]; then
              if grep -qE '\\cite|\\bibliography|\\addbibresource' "$file" && echo "$CHANGED_IN_GIT" | grep -q '\.bib$'; then
                NEEDS_COMPILE=true
                REASON="bibliography changed"
              fi
            fi
            
            if [ "$NEEDS_COMPILE" = "false" ]; then
              if echo "$CHANGED_IN_GIT" | grep -qE '\.(cls|sty)$'; then
                NEEDS_COMPILE=true
                REASON="class or style file changed"
              fi
            fi
            
            if [ "$NEEDS_COMPILE" = "true" ]; then
              echo "$file: needs compilation ($REASON)"
              FILES_TO_COMPILE="$FILES_TO_COMPILE $file"
            else
              echo "$file: no changes detected, skipping"
            fi
          done
        fi
        
        echo "----------------------------------------"
        
        if [ -z "$FILES_TO_COMPILE" ]; then
          echo "No files need compilation"
          echo "HAS_CHANGES=false" >> $GITHUB_OUTPUT
        else
          echo ""
          echo "Files to compile:"
          for file in $FILES_TO_COMPILE; do
            echo "  - $file"
          done
          echo "FILES_TO_COMPILE<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES_TO_COMPILE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "HAS_CHANGES=true" >> $GITHUB_OUTPUT
        fi
        
        echo "========================================================"
    
    - name: Check compilation requirements
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true'
      id: check-phase2
      shell: bash
      run: |
        echo "Analyzing documents to determine compilation strategy..."
        echo "========================================================"
        
        FILES_TO_COMPILE="${{ steps.detect-changes.outputs.FILES_TO_COMPILE }}"
        NEEDS_PHASE2_GLOBAL=false
        
        for file in $FILES_TO_COMPILE; do
          echo ""
          echo "Analyzing: $file"
          echo "----------------------------------------"
          
          NEEDS_PHASE2=false
          
          if grep -qE '\\bibliography\{|\\addbibresource\{|\\printbibliography|\\cite\{|\\citep\{|\\citet\{' "$file"; then
            echo "[CHECK] Bibliography/Citations: FOUND"
            NEEDS_PHASE2=true
          else
            echo "[CHECK] Bibliography/Citations: NOT FOUND"
          fi
          
          if grep -qE '\\ref\{|\\pageref\{|\\eqref\{|\\label\{' "$file"; then
            echo "[CHECK] Cross-references: FOUND"
            NEEDS_PHASE2=true
          else
            echo "[CHECK] Cross-references: NOT FOUND"
          fi
          
          if grep -qE '\\tableofcontents|\\listoffigures|\\listoftables' "$file"; then
            echo "[CHECK] TOC/LOF/LOT: FOUND"
            NEEDS_PHASE2=true
          else
            echo "[CHECK] TOC/LOF/LOT: NOT FOUND"
          fi
          
          BASENAME="${file%.tex}"
          if [ "$NEEDS_PHASE2" = "true" ]; then
            echo "DECISION: Phase 2 required for $file"
            echo "true" > "${BASENAME}.phase2"
            NEEDS_PHASE2_GLOBAL=true
          else
            echo "DECISION: Phase 2 not needed for $file"
            echo "false" > "${BASENAME}.phase2"
          fi
        done
        
        shopt -s nullglob
        if ls *.bib >/dev/null 2>&1; then
          echo ""
          echo "[CHECK] Bibliography files (.bib): FOUND"
          NEEDS_PHASE2_GLOBAL=true
        fi
        
        echo "========================================================"
        echo ""
        
        if [ "$NEEDS_PHASE2_GLOBAL" = "true" ]; then
          echo "GLOBAL DECISION: Phase 2 capability is REQUIRED"
          echo "At least one document needs multiple compilation passes"
          echo "NEEDS_PHASE2_GLOBAL=true" >> $GITHUB_OUTPUT
        else
          echo "GLOBAL DECISION: Phase 2 capability is NOT NEEDED"
          echo "All documents are simple, Phase 1 is sufficient"
          echo "NEEDS_PHASE2_GLOBAL=false" >> $GITHUB_OUTPUT
        fi
        
        echo "========================================================"
    
    - name: Cache TeX Live installation
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true'
      id: cache-texlive
      uses: actions/cache@v4
      with:
        path: ~/texlive
        key: texlive-basic-2025-v3-${{ runner.os }}
        restore-keys: |
          texlive-basic-2025-v3-${{ runner.os }}-
          texlive-basic-2025-
    
    - name: Check TeX Live installation status
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true'
      id: check-texlive
      shell: bash
      run: |
        echo "Checking TeX Live installation status..."
        echo "----------------------------------------"
        
        YEAR=2025
        
        if [ -d "$HOME/texlive/$YEAR" ]; then
          BIN_DIR=$(find "$HOME/texlive/$YEAR/bin" -type d -name "*-linux" 2>/dev/null | head -1)
          
          if [ -n "$BIN_DIR" ] && [ -f "$BIN_DIR/pdflatex" ]; then
            echo "Valid TeX Live $YEAR installation found"
            echo "Binary directory: $BIN_DIR"
            echo "SKIP_INSTALL=true" >> $GITHUB_OUTPUT
            echo "BIN_DIR=$BIN_DIR" >> $GITHUB_OUTPUT
          else
            echo "TeX Live directory incomplete, reinstallation required"
            echo "SKIP_INSTALL=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "No TeX Live installation found in cache"
          echo "SKIP_INSTALL=false" >> $GITHUB_OUTPUT
        fi
        
        echo "----------------------------------------"
    
    - name: Install TeX Live to user directory
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true' && steps.check-texlive.outputs.SKIP_INSTALL != 'true'
      shell: bash
      run: |
        echo "Installing TeX Live 2025..."
        echo "----------------------------------------"
        
        YEAR=2025
        
        mkdir -p ~/texlive-temp
        cd ~/texlive-temp
        
        wget -q http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
        tar -xzf install-tl-unx.tar.gz
        
        INSTALL_DIR=$(find . -name "install-tl-2*" -type d | head -1)
        cd "$INSTALL_DIR"
        
        cat > texlive.profile << 'ENDPROFILE'
        selected_scheme scheme-basic
        TEXDIR ~/texlive/2025
        TEXMFCONFIG ~/texlive/2025/texmf-config
        TEXMFHOME ~/texlive/2025/texmf
        TEXMFLOCAL ~/texlive/2025/texmf-local
        TEXMFSYSCONFIG ~/texlive/2025/texmf-config
        TEXMFSYSVAR ~/texlive/2025/texmf-var
        TEXMFVAR ~/texlive/2025/texmf-var
        option_adjustrepo 1
        option_autobackup 1
        option_desktop_integration 0
        option_doc 0
        option_file_assocs 0
        option_fmt 1
        option_letter 0
        option_menu_integration 0
        option_path 0
        option_post_code 1
        option_src 0
        option_sys_bin ~/texlive/2025/bin
        option_sys_info ~/texlive/2025/share/info
        option_sys_man ~/texlive/2025/share/man
        option_w32_multi_user 0
        ENDPROFILE
        
        ./install-tl -profile texlive.profile
        
        BIN_DIR=$(find ~/texlive/$YEAR/bin -type d -name "*-linux" | head -1)
        
        if [ -z "$BIN_DIR" ]; then
          echo "Error: Could not find TeX Live bin directory after installation"
          exit 1
        fi
        
        echo "TeX Live installed successfully"
        echo "Binary directory: $BIN_DIR"
        
        $BIN_DIR/tlmgr install \
          latexmk \
          amsmath amsfonts amscls \
          graphics xcolor \
          geometry fancyhdr \
          hyperref url
        
        echo "TeX Live basic installation completed"
        echo "----------------------------------------"
    
    - name: Setup TeX Live PATH
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true'
      shell: bash
      run: |
        YEAR=2025
        
        if [ -n "${{ steps.check-texlive.outputs.BIN_DIR }}" ]; then
          BIN_DIR="${{ steps.check-texlive.outputs.BIN_DIR }}"
          echo "Using cached TeX Live from: $BIN_DIR"
        else
          BIN_DIR=$(find ~/texlive/$YEAR/bin -type d -name "*-linux" 2>/dev/null | head -1)
          
          if [ -z "$BIN_DIR" ]; then
            echo "Error: Could not find TeX Live bin directory"
            exit 1
          fi
        fi
        
        echo "$BIN_DIR" >> $GITHUB_PATH
        export PATH="$BIN_DIR:$PATH"
        
        echo "TeX Live PATH configured successfully"
    
    - name: Verify TeX Live installation
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true'
      shell: bash
      run: |
        echo "TeX Live Installation Verification"
        echo "----------------------------------------"
        
        which pdflatex || { echo "Error: pdflatex not found"; exit 1; }
        echo "pdflatex version:"
        pdflatex --version | head -2
        echo ""
        
        which latexmk || { echo "Error: latexmk not found"; exit 1; }
        echo "latexmk version:"
        latexmk --version | head -1
        echo ""
        
        which tlmgr || { echo "Error: tlmgr not found"; exit 1; }
        echo "tlmgr version:"
        tlmgr --version | head -1
        echo ""
        
        echo "Cache status: ${{ steps.cache-texlive.outputs.cache-hit }}"
        echo "----------------------------------------"
    
    - name: Install Python for texliveonfly
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true'
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Install texliveonfly
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true' && steps.cache-texlive.outputs.cache-hit != 'true'
      shell: bash
      run: |
        YEAR=2025
        BIN_DIR=$(find ~/texlive/$YEAR/bin -type d -name "*-linux" | head -1)
        export PATH="$BIN_DIR:$PATH"
        
        echo "Installing texliveonfly..."
        tlmgr install texliveonfly
        
        SCRIPT_PATH="$BIN_DIR/texliveonfly"
        
        if [ -f "$SCRIPT_PATH" ]; then
          echo "texliveonfly found at: $SCRIPT_PATH"
          chmod +x "$SCRIPT_PATH"
        else
          echo "texliveonfly not found as executable, searching for Python script..."
          SCRIPT_PATH=$(find ~/texlive/$YEAR/texmf-dist/scripts/texliveonfly -name "texliveonfly.py" 2>/dev/null | head -1)
          
          if [ -f "$SCRIPT_PATH" ]; then
            echo "Found Python script at: $SCRIPT_PATH"
            echo '#!/bin/bash' > "$BIN_DIR/texliveonfly"
            echo 'YEAR=2025' >> "$BIN_DIR/texliveonfly"
            echo 'SCRIPT=$(find ~/texlive/$YEAR/texmf-dist/scripts/texliveonfly -name "texliveonfly.py" | head -1)' >> "$BIN_DIR/texliveonfly"
            echo 'python3 "$SCRIPT" "$@"' >> "$BIN_DIR/texliveonfly"
            chmod +x "$BIN_DIR/texliveonfly"
            echo "Wrapper script created successfully"
          else
            echo "Error: Could not find texliveonfly script"
            exit 1
          fi
        fi
        
        echo "texliveonfly installation completed"
    
    - name: Phase 1 - Install missing packages and compile changed documents
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true'
      shell: bash
      run: |
        echo "=========================================="
        echo "Phase 1: Installing packages and initial compilation"
        echo "=========================================="
        echo ""
        
        FILES_TO_COMPILE="${{ steps.detect-changes.outputs.FILES_TO_COMPILE }}"
        COMPILED_COUNT=0
        FAILED_COUNT=0
        
        for file in $FILES_TO_COMPILE; do
          echo "=========================================="
          echo "Compiling: $file"
          echo "=========================================="
          
          BASENAME="${file%.tex}"
          
          texliveonfly \
            --compiler=pdflatex \
            --arguments="-interaction=nonstopmode -file-line-error -shell-escape" \
            "$file" || true
          
          if [ ! -f "${BASENAME}.pdf" ]; then
            echo "Error: texliveonfly failed to create PDF for $file"
            echo "Displaying last 50 lines of log file:"
            tail -50 "${BASENAME}.log" 2>/dev/null || echo "No log file found"
            FAILED_COUNT=$((FAILED_COUNT + 1))
            continue
          fi
          
          PDF_SIZE=$(du -h "${BASENAME}.pdf" | cut -f1)
          echo "Phase 1 completed for $file - PDF generated: ${BASENAME}.pdf ($PDF_SIZE)"
          COMPILED_COUNT=$((COMPILED_COUNT + 1))
          echo ""
        done
        
        echo "=========================================="
        echo "Phase 1 Summary"
        echo "=========================================="
        echo "Successfully compiled: $COMPILED_COUNT document(s)"
        echo "Failed: $FAILED_COUNT document(s)"
        echo "=========================================="
        echo ""
        
        if [ $COMPILED_COUNT -eq 0 ]; then
          echo "Error: No documents were successfully compiled in Phase 1"
          exit 1
        fi
        
        echo "PHASE1_COMPILED=$COMPILED_COUNT" >> $GITHUB_ENV
        echo "PHASE1_FAILED=$FAILED_COUNT" >> $GITHUB_ENV
    
    - name: Phase 2 - Smart compilation with latexmk
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true' && steps.check-phase2.outputs.NEEDS_PHASE2_GLOBAL == 'true'
      shell: bash
      run: |
        echo "=========================================="
        echo "Phase 2: Smart compilation with latexmk"
        echo "=========================================="
        echo ""
        
        FILES_TO_COMPILE="${{ steps.detect-changes.outputs.FILES_TO_COMPILE }}"
        PHASE2_COUNT=0
        SKIPPED_COUNT=0
        
        for file in $FILES_TO_COMPILE; do
          BASENAME="${file%.tex}"
          
          if [ ! -f "${BASENAME}.pdf" ]; then
            echo "Skipping $file - Phase 1 compilation failed"
            continue
          fi
          
          if [ -f "${BASENAME}.phase2" ]; then
            NEEDS_PHASE2=$(cat "${BASENAME}.phase2")
          else
            NEEDS_PHASE2=false
          fi
          
          if [ "$NEEDS_PHASE2" = "false" ]; then
            echo "Skipping Phase 2 for $file - not needed"
            SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
            continue
          fi
          
          echo "=========================================="
          echo "Running latexmk for: $file"
          echo "=========================================="
          
          latexmk -pdf \
            -f \
            -interaction=nonstopmode \
            -file-line-error \
            -shell-escape \
            "$file" || true
          
          if [ ! -f "${BASENAME}.pdf" ]; then
            echo "Error: latexmk failed to create PDF for $file"
            echo "Displaying last 50 lines of log file:"
            tail -50 "${BASENAME}.log" 2>/dev/null || echo "No log file found"
            continue
          fi
          
          PDF_SIZE=$(du -h "${BASENAME}.pdf" | cut -f1)
          echo "Phase 2 completed for $file - Final PDF: ${BASENAME}.pdf ($PDF_SIZE)"
          PHASE2_COUNT=$((PHASE2_COUNT + 1))
          
          if [ -f "${BASENAME}.log" ]; then
            echo ""
            echo "Checking for warnings in ${BASENAME}.log:"
            if grep -q -i "warning" "${BASENAME}.log"; then
              echo "Warnings found (showing first 10):"
              grep -i "warning" "${BASENAME}.log" | head -10
            else
              echo "No warnings found"
            fi
            
            echo ""
            echo "Checking for errors in ${BASENAME}.log:"
            if grep -q "^!" "${BASENAME}.log"; then
              echo "LaTeX errors detected (showing first 10):"
              grep "^!" "${BASENAME}.log" | head -10
              echo ""
              echo "Note: PDF was still generated despite errors"
            else
              echo "No LaTeX errors found"
            fi
          fi
          
          echo ""
        done
        
        echo "=========================================="
        echo "Phase 2 Summary"
        echo "=========================================="
        echo "Processed with latexmk: $PHASE2_COUNT document(s)"
        echo "Skipped (not needed): $SKIPPED_COUNT document(s)"
        echo "=========================================="
        
        echo "PHASE2_PROCESSED=$PHASE2_COUNT" >> $GITHUB_ENV
        echo "PHASE2_SKIPPED=$SKIPPED_COUNT" >> $GITHUB_ENV
    
    - name: Compilation summary
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true'
      shell: bash
      run: |
        echo ""
        echo "=========================================="
        echo "Final Compilation Summary"
        echo "=========================================="
        
        if [ "${{ steps.check-phase2.outputs.NEEDS_PHASE2_GLOBAL }}" = "true" ]; then
          echo "Strategy: Two-phase compilation"
          echo "  Phase 1: texliveonfly (package installation)"
          echo "  Phase 2: latexmk (smart multi-pass)"
        else
          echo "Strategy: Single-phase compilation"
          echo "  Phase 1: texliveonfly (package installation)"
          echo "  Phase 2: SKIPPED (not needed for any document)"
        fi
        
        echo ""
        echo "Compiled PDFs:"
        
        FILES_TO_COMPILE="${{ steps.detect-changes.outputs.FILES_TO_COMPILE }}"
        PDF_COUNT=0
        
        for file in $FILES_TO_COMPILE; do
          BASENAME="${file%.tex}"
          if [ -f "${BASENAME}.pdf" ]; then
            PDF_SIZE=$(du -h "${BASENAME}.pdf" | cut -f1)
            echo "  - ${BASENAME}.pdf ($PDF_SIZE)"
            PDF_COUNT=$((PDF_COUNT + 1))
          fi
        done
        
        if [ $PDF_COUNT -eq 0 ]; then
          echo "  No PDFs generated"
        fi
        
        echo "=========================================="
    
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: compilation-logs
        path: |
          *.log
          *.aux
          *.blg
        retention-days: 7
    
    - name: Commit PDFs to repository
      if: steps.detect-changes.outputs.HAS_CHANGES == 'true'
      shell: bash
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "LaTeX Compiler Bot"
        
        git pull --rebase origin ${{ github.ref_name }} || {
          echo "Warning: Pull failed, attempting to continue"
        }
        
        git add *.pdf
        
        if ! git diff --staged --quiet; then
          FILES_TO_COMPILE="${{ steps.detect-changes.outputs.FILES_TO_COMPILE }}"
          PDF_COUNT=0
          
          for file in $FILES_TO_COMPILE; do
            BASENAME="${file%.tex}"
            if [ -f "${BASENAME}.pdf" ]; then
              PDF_COUNT=$((PDF_COUNT + 1))
            fi
          done
          
          git commit -m "Auto-compile LaTeX: $PDF_COUNT document(s) - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          MAX_RETRIES=3
          RETRY=0
          SUCCESS=false
          
          while [ $RETRY -lt $MAX_RETRIES ]; do
            if git push; then
              echo "=========================================="
              echo "PDFs committed and pushed successfully"
              echo "=========================================="
              SUCCESS=true
              break
            else
              RETRY=$((RETRY + 1))
              echo "Push attempt $RETRY/$MAX_RETRIES failed"
              
              if [ $RETRY -lt $MAX_RETRIES ]; then
                echo "Waiting before retry..."
                sleep $((RETRY * 2))
                
                git pull --rebase origin ${{ github.ref_name }} || {
                  echo "Error: Pull failed during retry"
                  exit 1
                }
              fi
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "Error: Failed to push after $MAX_RETRIES attempts"
            exit 1
          fi
        else
          echo "=========================================="
          echo "No changes detected - PDFs are up to date"
          echo "=========================================="
        fi
    
    - name: No changes detected
      if: steps.detect-changes.outputs.HAS_CHANGES != 'true'
      shell: bash
      run: |
        echo "=========================================="
        echo "No Compilation Needed"
        echo "=========================================="
        echo "No LaTeX files were changed in this commit"
        echo "All PDFs are up to date"
        echo "=========================================="
    
    - name: Generate compilation summary
      if: always()
      shell: bash
      run: |
        echo "## Compilation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow:** LaTeX Compiler (Multi-Document with Smart Detection)" >> $GITHUB_STEP_SUMMARY
        echo "- **TeX Live Version:** 2025" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.detect-changes.outputs.HAS_CHANGES }}" = "true" ]; then
          echo "- **Cache Hit:** ${{ steps.cache-texlive.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
          
          FILES_TO_COMPILE="${{ steps.detect-changes.outputs.FILES_TO_COMPILE }}"
          COMPILE_COUNT=$(echo "$FILES_TO_COMPILE" | wc -w)
          
          echo "- **Files Compiled:** $COMPILE_COUNT" >> $GITHUB_STEP_SUMMARY
          
          shopt -s nullglob
          TOTAL_PDFS=$(ls -1 *.pdf 2>/dev/null | wc -l)
          echo "- **Total PDFs in Repository:** $TOTAL_PDFS" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Compilation Strategy" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check-phase2.outputs.NEEDS_PHASE2_GLOBAL }}" = "true" ]; then
            echo "**Two-Phase Compilation:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Phase 1: Package installation via texliveonfly" >> $GITHUB_STEP_SUMMARY
            echo "2. Phase 2: Smart compilation via latexmk (EXECUTED)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Reason: One or more documents contain bibliography, cross-references, or TOC" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Single-Phase Compilation:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Phase 1: Package installation via texliveonfly" >> $GITHUB_STEP_SUMMARY
            echo "2. Phase 2: Smart compilation via latexmk (SKIPPED)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Reason: All documents are simple without advanced features" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Compiled Documents" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for file in $FILES_TO_COMPILE; do
            BASENAME="${file%.tex}"
            if [ -f "${BASENAME}.pdf" ]; then
              PDF_SIZE=$(du -h "${BASENAME}.pdf" | cut -f1)
              echo "- \`${BASENAME}.pdf\` ($PDF_SIZE)" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          TOTAL_WARNINGS=0
          for file in $FILES_TO_COMPILE; do
            BASENAME="${file%.tex}"
            if [ -f "${BASENAME}.log" ]; then
              WARNING_COUNT=$(grep -c -i "warning" "${BASENAME}.log" 2>/dev/null || echo "0")
              TOTAL_WARNINGS=$((TOTAL_WARNINGS + WARNING_COUNT))
            fi
          done
          
          echo "- **Total Warnings:** $TOTAL_WARNINGS" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Action Taken:** None" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### No Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No LaTeX-related files were modified in this commit." >> $GITHUB_STEP_SUMMARY
          echo "All PDFs are already up to date." >> $GITHUB_STEP_SUMMARY
        fi
