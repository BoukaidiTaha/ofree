name: LaTeX Compiler

on:
  push:
    paths: ['**.tex', '**.bib', '**.cls', '**.sty', '**.yml', '**.yaml']
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Validate LaTeX files
      shell: bash
      run: |
        if [ ! -f "main.tex" ]; then
          echo "Error: main.tex not found in repository root"
          exit 1
        fi
        echo "Validation successful: main.tex found"
    
    - name: Check if Phase 2 is needed
      id: check-phase2
      shell: bash
      run: |
        NEEDS_PHASE2=false
        
        echo "::group::Analyzing document structure"
        echo "Checking main.tex for advanced features..."
        
        if grep -qE '\\bibliography\{|\\addbibresource\{|\\printbibliography|\\cite\{|\\citep\{|\\citet\{' main.tex; then
          echo "[FOUND] Bibliography/Citations"
          NEEDS_PHASE2=true
        else
          echo "[NOT FOUND] Bibliography/Citations"
        fi
        
        if grep -qE '\\ref\{|\\pageref\{|\\eqref\{|\\label\{' main.tex; then
          echo "[FOUND] Cross-references"
          NEEDS_PHASE2=true
        else
          echo "[NOT FOUND] Cross-references"
        fi
        
        if grep -qE '\\tableofcontents|\\listoffigures|\\listoftables' main.tex; then
          echo "[FOUND] TOC/LOF/LOT"
          NEEDS_PHASE2=true
        else
          echo "[NOT FOUND] TOC/LOF/LOT"
        fi
        
        if ls *.bib >/dev/null 2>&1; then
          echo "[FOUND] Bibliography files (.bib)"
          NEEDS_PHASE2=true
        else
          echo "[NOT FOUND] Bibliography files"
        fi
        echo "::endgroup::"
        
        if [ "$NEEDS_PHASE2" = "true" ]; then
          echo ""
          echo "Decision: Phase 2 (latexmk) REQUIRED"
          echo "NEEDS_PHASE2=true" >> $GITHUB_OUTPUT
        else
          echo ""
          echo "Decision: Phase 2 (latexmk) NOT NEEDED"
          echo "NEEDS_PHASE2=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Cache TeX Live installation
      id: cache-texlive
      uses: actions/cache@v4
      with:
        path: ~/texlive
        key: texlive-basic-2025-v3-${{ runner.os }}
        restore-keys: |
          texlive-basic-2025-v3-${{ runner.os }}-
          texlive-basic-2025-
    
    - name: Check TeX Live installation status
      id: check-texlive
      shell: bash
      run: |
        echo "::group::Checking TeX Live cache"
        
        YEAR=2025
        
        if [ -d "$HOME/texlive/$YEAR" ]; then
          BIN_DIR=$(find "$HOME/texlive/$YEAR/bin" -type d -name "*-linux" 2>/dev/null | head -1)
          
          if [ -n "$BIN_DIR" ] && [ -f "$BIN_DIR/pdflatex" ]; then
            echo "Valid TeX Live $YEAR found in cache"
            echo "Binary directory: $BIN_DIR"
            echo "SKIP_INSTALL=true" >> $GITHUB_OUTPUT
            echo "BIN_DIR=$BIN_DIR" >> $GITHUB_OUTPUT
          else
            echo "TeX Live directory incomplete"
            echo "SKIP_INSTALL=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "No TeX Live installation in cache"
          echo "SKIP_INSTALL=false" >> $GITHUB_OUTPUT
        fi
        
        echo "::endgroup::"
    
    - name: Install TeX Live to user directory
      if: steps.check-texlive.outputs.SKIP_INSTALL != 'true'
      shell: bash
      run: |
        echo "Installing TeX Live 2025..."
        
        YEAR=2025
        
        echo "::group::Downloading TeX Live installer"
        mkdir -p ~/texlive-temp
        cd ~/texlive-temp
        wget -q http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
        tar -xzf install-tl-unx.tar.gz
        echo "Download complete"
        echo "::endgroup::"
        
        echo "::group::Preparing installation profile"
        INSTALL_DIR=$(find . -name "install-tl-2*" -type d | head -1)
        cd "$INSTALL_DIR"
        
        cat > texlive.profile << 'ENDPROFILE'
        selected_scheme scheme-basic
        TEXDIR ~/texlive/2025
        TEXMFCONFIG ~/texlive/2025/texmf-config
        TEXMFHOME ~/texlive/2025/texmf
        TEXMFLOCAL ~/texlive/2025/texmf-local
        TEXMFSYSCONFIG ~/texlive/2025/texmf-config
        TEXMFSYSVAR ~/texlive/2025/texmf-var
        TEXMFVAR ~/texlive/2025/texmf-var
        option_adjustrepo 1
        option_autobackup 1
        option_desktop_integration 0
        option_doc 0
        option_file_assocs 0
        option_fmt 1
        option_letter 0
        option_menu_integration 0
        option_path 0
        option_post_code 1
        option_src 0
        option_sys_bin ~/texlive/2025/bin
        option_sys_info ~/texlive/2025/share/info
        option_sys_man ~/texlive/2025/share/man
        option_w32_multi_user 0
        ENDPROFILE
        echo "Profile created"
        echo "::endgroup::"
        
        echo "::group::Running TeX Live installation"
        ./install-tl -profile texlive.profile
        
        BIN_DIR=$(find ~/texlive/$YEAR/bin -type d -name "*-linux" | head -1)
        
        if [ -z "$BIN_DIR" ]; then
          echo "Error: Could not find TeX Live bin directory"
          exit 1
        fi
        
        echo "TeX Live core installed successfully"
        echo "Binary directory: $BIN_DIR"
        echo "::endgroup::"
        
        echo "::group::Installing essential LaTeX packages"
        $BIN_DIR/tlmgr install \
          latexmk \
          amsmath amsfonts amscls \
          graphics xcolor \
          geometry fancyhdr \
          hyperref url
        echo "Essential packages installed"
        echo "::endgroup::"
        
        echo "TeX Live installation completed"
    
    - name: Setup TeX Live PATH
      shell: bash
      run: |
        YEAR=2025
        
        if [ -n "${{ steps.check-texlive.outputs.BIN_DIR }}" ]; then
          BIN_DIR="${{ steps.check-texlive.outputs.BIN_DIR }}"
          echo "Using cached TeX Live from: $BIN_DIR"
        else
          BIN_DIR=$(find ~/texlive/$YEAR/bin -type d -name "*-linux" 2>/dev/null | head -1)
          
          if [ -z "$BIN_DIR" ]; then
            echo "Error: Could not find TeX Live bin directory"
            exit 1
          fi
        fi
        
        echo "$BIN_DIR" >> $GITHUB_PATH
        export PATH="$BIN_DIR:$PATH"
        
        echo "TeX Live PATH configured successfully"
    
    - name: Verify TeX Live installation
      shell: bash
      run: |
        echo "::group::Verifying TeX Live installation"
        
        which pdflatex || { echo "Error: pdflatex not found"; exit 1; }
        echo "pdflatex version:"
        pdflatex --version | head -2
        echo ""
        
        which latexmk || { echo "Error: latexmk not found"; exit 1; }
        echo "latexmk version:"
        latexmk --version | head -1
        echo ""
        
        which tlmgr || { echo "Error: tlmgr not found"; exit 1; }
        echo "tlmgr version:"
        tlmgr --version | head -1
        echo ""
        
        echo "Cache status: ${{ steps.cache-texlive.outputs.cache-hit }}"
        echo "::endgroup::"
    
    - name: Install Python for texliveonfly
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Install texliveonfly
      if: steps.cache-texlive.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo "::group::Installing texliveonfly"
        
        YEAR=2025
        BIN_DIR=$(find ~/texlive/$YEAR/bin -type d -name "*-linux" | head -1)
        export PATH="$BIN_DIR:$PATH"
        
        tlmgr install texliveonfly
        
        SCRIPT_PATH="$BIN_DIR/texliveonfly"
        
        if [ -f "$SCRIPT_PATH" ]; then
          echo "texliveonfly found at: $SCRIPT_PATH"
          chmod +x "$SCRIPT_PATH"
        else
          echo "Creating wrapper script for texliveonfly..."
          SCRIPT_PATH=$(find ~/texlive/$YEAR/texmf-dist/scripts/texliveonfly -name "texliveonfly.py" 2>/dev/null | head -1)
          
          if [ -f "$SCRIPT_PATH" ]; then
            echo '#!/bin/bash' > "$BIN_DIR/texliveonfly"
            echo 'YEAR=2025' >> "$BIN_DIR/texliveonfly"
            echo 'SCRIPT=$(find ~/texlive/$YEAR/texmf-dist/scripts/texliveonfly -name "texliveonfly.py" | head -1)' >> "$BIN_DIR/texliveonfly"
            echo 'python3 "$SCRIPT" "$@"' >> "$BIN_DIR/texliveonfly"
            chmod +x "$BIN_DIR/texliveonfly"
            echo "Wrapper created successfully"
          else
            echo "Error: Could not find texliveonfly script"
            exit 1
          fi
        fi
        
        echo "texliveonfly installation completed"
        echo "::endgroup::"
    
    - name: Phase 1 - Install missing packages
      shell: bash
      run: |
        echo "Phase 1: Installing missing packages and initial compilation"
        
        echo "::group::Running texliveonfly"
        texliveonfly \
          --compiler=pdflatex \
          --arguments="-interaction=nonstopmode -file-line-error -shell-escape" \
          main.tex || true
        echo "::endgroup::"
        
        if [ ! -f "main.pdf" ]; then
          echo "::error::texliveonfly failed to create PDF"
          echo "::group::Error logs (last 50 lines)"
          tail -50 main.log
          echo "::endgroup::"
          exit 1
        fi
        
        echo "Phase 1 completed: Initial PDF generated"
    
    - name: Phase 2 - Smart compilation with latexmk
      if: steps.check-phase2.outputs.NEEDS_PHASE2 == 'true'
      shell: bash
      run: |
        echo "Phase 2: Smart multi-pass compilation with latexmk"
        
        echo "::group::Running latexmk"
        latexmk -pdf \
          -f \
          -interaction=nonstopmode \
          -file-line-error \
          -shell-escape \
          main.tex || true
        echo "::endgroup::"
        
        if [ ! -f "main.pdf" ]; then
          echo "::error::latexmk failed to create PDF"
          echo "::group::Error logs (last 50 lines)"
          tail -50 main.log
          echo "::endgroup::"
          exit 1
        fi
        
        echo "::group::Checking compilation results"
        if [ -f "main.log" ]; then
          if grep -q -i "warning" main.log; then
            echo "Warnings found (first 10):"
            grep -i "warning" main.log | head -10
          else
            echo "No warnings found"
          fi
          
          if grep -q "^!" main.log; then
            echo ""
            echo "LaTeX errors detected (first 10):"
            grep "^!" main.log | head -10
            echo ""
            echo "Note: PDF was generated despite errors"
          else
            echo "No LaTeX errors found"
          fi
        fi
        echo "::endgroup::"
        
        echo "Phase 2 completed: Final PDF generated"
    
    - name: Display compilation summary
      if: always()
      shell: bash
      run: |
        echo ""
        echo "========================================"
        echo "Compilation Summary"
        echo "========================================"
        
        if [ "${{ steps.check-phase2.outputs.NEEDS_PHASE2 }}" = "true" ]; then
          echo "Strategy: Two-phase compilation"
          echo "  - Phase 1: texliveonfly (package installation)"
          echo "  - Phase 2: latexmk (smart multi-pass)"
        else
          echo "Strategy: Single-phase compilation"
          echo "  - Phase 1: texliveonfly (package installation)"
          echo "  - Phase 2: SKIPPED (simple document)"
        fi
        
        echo ""
        if [ -f "main.pdf" ]; then
          echo "Final PDF:"
          ls -lh main.pdf
          
          PDF_PAGES=$(pdfinfo main.pdf 2>/dev/null | grep "Pages:" | awk '{print $2}' || echo "unknown")
          echo "Pages: $PDF_PAGES"
        else
          echo "Status: PDF generation failed"
        fi
        echo "========================================"
    
    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: compilation-logs
        path: |
          *.log
          *.aux
          *.blg
        retention-days: 7
    
    - name: Commit PDF to repository
      shell: bash
      run: |
        echo "::group::Committing PDF to repository"
        
        git config --local user.email "action@github.com"
        git config --local user.name "LaTeX Compiler Bot"
        
        git pull --rebase origin ${{ github.ref_name }} || {
          echo "Warning: Pull failed, attempting to continue"
        }
        
        git add main.pdf
        
        if ! git diff --staged --quiet; then
          git commit -m "Auto-compile LaTeX: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          
          MAX_RETRIES=3
          RETRY=0
          SUCCESS=false
          
          while [ $RETRY -lt $MAX_RETRIES ]; do
            if git push; then
              echo "PDF committed and pushed successfully"
              SUCCESS=true
              break
            else
              RETRY=$((RETRY + 1))
              echo "Push attempt $RETRY/$MAX_RETRIES failed"
              
              if [ $RETRY -lt $MAX_RETRIES ]; then
                sleep $((RETRY * 2))
                git pull --rebase origin ${{ github.ref_name }} || {
                  echo "Error: Pull failed during retry"
                  exit 1
                }
              fi
            fi
          done
          
          if [ "$SUCCESS" = false ]; then
            echo "Error: Failed to push after $MAX_RETRIES attempts"
            exit 1
          fi
        else
          echo "No changes detected - PDF is up to date"
        fi
        
        echo "::endgroup::"
    
    - name: Generate GitHub Actions summary
      if: always()
      shell: bash
      run: |
        echo "## Compilation Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ **Compilation Status:** Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Compilation Status:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- **Workflow:** LaTeX Compiler (Hybrid Approach)" >> $GITHUB_STEP_SUMMARY
        echo "- **TeX Live Version:** 2025" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.cache-texlive.outputs.cache-hit }}" = "true" ]; then
          echo "- **Cache:** Hit (fast build)" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **Cache:** Miss (full installation)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Compilation Strategy" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check-phase2.outputs.NEEDS_PHASE2 }}" = "true" ]; then
          echo "**Two-Phase Compilation**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Phase 1: Package installation (texliveonfly)" >> $GITHUB_STEP_SUMMARY
          echo "2. ✅ Phase 2: Smart multi-pass compilation (latexmk)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> Document contains bibliography, cross-references, or TOC" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Single-Phase Compilation**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ Phase 1: Package installation (texliveonfly)" >> $GITHUB_STEP_SUMMARY
          echo "2. ⏭️ Phase 2: Skipped (not needed)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> Simple document without advanced features" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Output" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "main.pdf" ]; then
          PDF_SIZE=$(du -h main.pdf | cut -f1)
          PDF_PAGES=$(pdfinfo main.pdf 2>/dev/null | grep "Pages:" | awk '{print $2}' || echo "N/A")
          
          echo "- **PDF File:** main.pdf" >> $GITHUB_STEP_SUMMARY
          echo "- **File Size:** $PDF_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- **Pages:** $PDF_PAGES" >> $GITHUB_STEP_SUMMARY
        else
          echo "- **PDF File:** Not generated" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "main.log" ]; then
          WARNING_COUNT=$(grep -c -i "warning" main.log 2>/dev/null || echo "0")
          ERROR_COUNT=$(grep -c "^!" main.log 2>/dev/null || echo "0")
          
          echo "### Diagnostics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Warnings:** $WARNING_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Errors:** $ERROR_COUNT" >> $GITHUB_STEP_SUMMARY
          
          if [ "$ERROR_COUNT" -gt "0" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "> ⚠️ PDF was generated despite LaTeX errors. Check logs for details." >> $GITHUB_STEP_SUMMARY
          fi
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📅 Compiled on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
