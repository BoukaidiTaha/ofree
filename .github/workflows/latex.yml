name: LaTeX Compiler with Comprehensive Caching

on:
  push:
    paths: ['**.tex', '**.bib', '**.cls', '**.sty', '**.yml', '**.yaml']
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Cache TeX Live with packages
      id: cache
      uses: actions/cache@v4
      with:
        path: ~/texlive
        key: texlive-comprehensive-v2-${{ hashFiles('**/packages.txt') }}
        restore-keys: |
          texlive-comprehensive-v2-
          texlive-comprehensive-
    
    - name: Install TeX Live with comprehensive packages
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        echo "Installing TeX Live with comprehensive packages to ~/texlive..."
        
        # Create installation directory
        mkdir -p ~/texlive-temp
        cd ~/texlive-temp
        
        # Download installer
        wget -q http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
        tar -xzf install-tl-unx.tar.gz
        
        # Find and enter installer directory
        INSTALL_DIR=$(find . -name "install-tl-2*" -type d | head -1)
        cd "$INSTALL_DIR"
        
        # Create installation profile for user directory
        cat > texlive.profile << 'EOF'
        selected_scheme scheme-basic
        TEXDIR ~/texlive/2023
        TEXMFCONFIG ~/texlive/2023/texmf-config
        TEXMFHOME ~/texlive/2023/texmf
        TEXMFLOCAL ~/texlive/2023/texmf-local
        TEXMFSYSCONFIG ~/texlive/2023/texmf-config
        TEXMFSYSVAR ~/texlive/2023/texmf-var
        TEXMFVAR ~/texlive/2023/texmf-var
        option_adjustrepo 1
        option_autobackup 1
        option_desktop_integration 0
        option_doc 0
        option_file_assocs 0
        option_fmt 1
        option_letter 0
        option_menu_integration 0
        option_path 0
        option_post_code 1
        option_src 0
        option_sys_bin ~/texlive/2023/bin
        option_sys_info ~/texlive/2023/share/info
        option_sys_man ~/texlive/2023/share/man
        option_w32_multi_user 0
        EOF
        
        # Install to user directory (no sudo needed)
        ./install-tl -profile texlive.profile
        
        # Add TeX Live to PATH for package installation
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        
        echo "Installing comprehensive package collection..."
        
        # Install comprehensive package collection
        ~/texlive/2023/bin/x86_64-linux/tlmgr install \
          amsmath amsfonts amssymb amsthm mathtools physics siunitx \
          booktabs array longtable multirow multicol tabularx colortbl \
          diagbox threeparttable tabu \
          graphicx graphics xcolor tikz pgf pgfplots circuitikz \
          float wrapfig subfigure subcaption caption rotating \
          algorithm algorithms algorithmicx algpseudocode listings minted \
          hyperref url fancyhdr geometry titlesec titletoc appendix \
          footmisc enumitem paralist soul ulem microtype \
          biblatex natbib babel inputenc fontenc \
          lipsum datetime ifthen calc xspace comment verbatim \
          units steinmetz bodeplot chemmacros mhchem chemfig \
          cancel nccmath empheq cases tools \
          hepnames hep breqn mathrsfs systeme \
          ntheorem thmtools eulervm mathdesign \
          pgfplotstable datatool sparklines \
          python matlab-prettifier \
          || {
            echo "Some packages failed to install, trying individual installation..."
            
            # Core packages that should always be available
            CORE_PACKAGES=(
              "amsmath" "amsfonts" "amssymb" "mathtools" "physics" "siunitx"
              "booktabs" "array" "longtable" "multirow" "tabularx" 
              "graphicx" "xcolor" "tikz" "pgf" "pgfplots"
              "float" "wrapfig" "subcaption" "caption"
              "algorithm" "algorithms" "algorithmicx" "listings"
              "hyperref" "fancyhdr" "geometry" "enumitem"
              "biblatex" "natbib" "babel" "inputenc" "fontenc"
              "lipsum" "calc" "tools"
            )
            
            # Extended packages (nice to have)
            EXTENDED_PACKAGES=(
              "circuitikz" "units" "steinmetz" "chemmacros" "mhchem"
              "cancel" "nccmath" "empheq" "cases" "colortbl" "diagbox"
              "threeparttable" "rotating" "algpseudocode" "minted"
              "titlesec" "titletoc" "footmisc" "paralist" "soul" "ulem"
              "microtype" "datetime" "ifthen" "xspace" "comment" "verbatim"
              "hepnames" "breqn" "mathrsfs" "systeme" "ntheorem" "thmtools"
              "eulervm" "mathdesign" "pgfplotstable" "datatool" "sparklines"
            )
            
            # Install core packages (essential)
            echo "Installing core packages..."
            for pkg in "${CORE_PACKAGES[@]}"; do
              echo "Installing core package: $pkg"
              ~/texlive/2023/bin/x86_64-linux/tlmgr install "$pkg" || echo "Failed to install core package: $pkg"
            done
            
            # Install extended packages (best effort)
            echo "Installing extended packages..."
            for pkg in "${EXTENDED_PACKAGES[@]}"; do
              echo "Installing extended package: $pkg"
              ~/texlive/2023/bin/x86_64-linux/tlmgr install "$pkg" || echo "Failed to install extended package: $pkg"
            done
          }
        
        # Clean up temporary files to reduce cache size
        cd ~
        rm -rf ~/texlive-temp
        
        # Remove documentation and source files to save space
        find ~/texlive/2023 -name "doc" -type d -exec rm -rf {} + 2>/dev/null || true
        find ~/texlive/2023 -name "source" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Display installation summary
        echo "TeX Live with comprehensive packages installed!"
        echo "Cache size:"
        du -sh ~/texlive/
        echo "Installed packages:"
        ~/texlive/2023/bin/x86_64-linux/tlmgr list --only-installed | wc -l
    
    - name: Setup TeX Live PATH and verify installation
      run: |
        # Add TeX Live to PATH
        echo "$HOME/texlive/2023/bin/x86_64-linux" >> $GITHUB_PATH
        
        # Verify installation
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        which pdflatex
        pdflatex --version
        
        echo "Cache status: ${{ steps.cache.outputs.cache-hit }}"
        if [ "${{ steps.cache.outputs.cache-hit }}" = "true" ]; then
          echo "✅ Using cached TeX Live installation with packages!"
          echo "Installed packages:"
          ~/texlive/2023/bin/x86_64-linux/tlmgr list --only-installed | wc -l
        else
          echo "✅ Fresh TeX Live installation with comprehensive packages completed!"
        fi
        
        # Display some key package availability
        echo "Checking key packages:"
        packages_to_check=("amsmath" "tikz" "pgfplots" "algorithm" "listings" "hyperref" "biblatex")
        for pkg in "${packages_to_check[@]}"; do
          if kpsewhich ${pkg}.sty >/dev/null 2>&1 || kpsewhich t-${pkg}.tex >/dev/null 2>&1; then
            echo "✅ $pkg: Available"
          else
            echo "❌ $pkg: Not found"
          fi
        done
    
    - name: Install additional packages if needed
      run: |
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        
        echo "Checking for any missing packages from LaTeX files..."
        
        # Extract package names from all .tex files
        REQUIRED_PACKAGES=()
        if compgen -G "*.tex" > /dev/null; then
          # Extract \usepackage and \RequirePackage commands
          REQUIRED_PACKAGES+=($(grep -h "\\\\usepackage\|\\\\RequirePackage" *.tex 2>/dev/null | \
            sed 's/.*{\([^}]*\)}.*/\1/' | \
            tr ',' '\n' | \
            sed 's/^[[:space:]]*//' | \
            sed 's/[[:space:]]*$//' | \
            sort -u))
        fi
        
        # Check and install missing packages
        MISSING_PACKAGES=()
        for package in "${REQUIRED_PACKAGES[@]}"; do
          if [[ -n "$package" ]] && ! kpsewhich ${package}.sty >/dev/null 2>&1; then
            echo "Missing package detected: $package"
            MISSING_PACKAGES+=("$package")
          fi
        done
        
        # Install any missing packages
        if [ ${#MISSING_PACKAGES[@]} -gt 0 ]; then
          echo "Installing missing packages: ${MISSING_PACKAGES[*]}"
          ~/texlive/2023/bin/x86_64-linux/tlmgr install "${MISSING_PACKAGES[@]}" || {
            echo "Some additional packages failed to install, trying individually..."
            for pkg in "${MISSING_PACKAGES[@]}"; do
              echo "Attempting to install: $pkg"
              ~/texlive/2023/bin/x86_64-linux/tlmgr install "$pkg" || echo "Failed to install $pkg"
            done
          }
        else
          echo "All required packages are available!"
        fi
    
    - name: Compile LaTeX documents
      run: |
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        
        # Find all main tex files (not included files)
        MAIN_FILES=()
        if compgen -G "*.tex" > /dev/null; then
          for file in *.tex; do
            # Check if this file is likely a main document (contains \documentclass)
            if grep -q "\\\\documentclass" "$file"; then
              MAIN_FILES+=("$file")
            fi
          done
        fi
        
        # If no main files found, default to main.tex
        if [ ${#MAIN_FILES[@]} -eq 0 ] && [ -f "main.tex" ]; then
          MAIN_FILES=("main.tex")
        fi
        
        if [ ${#MAIN_FILES[@]} -eq 0 ]; then
          echo "Error: No LaTeX main files found!"
          echo "Looking for files with \\documentclass or main.tex"
          exit 1
        fi
        
        # Compile each main file
        SUCCESS=true
        for tex_file in "${MAIN_FILES[@]}"; do
          echo "Compiling $tex_file..."
          pdf_file="${tex_file%.tex}.pdf"
          
          # Run pdflatex multiple times for proper cross-references
          pdflatex -interaction=nonstopmode "$tex_file" || true
          if [ -f "${tex_file%.tex}.aux" ]; then
            # Run bibtex if .bib files exist
            if compgen -G "*.bib" > /dev/null; then
              bibtex "${tex_file%.tex}" || true
            fi
            # Second pass for references
            pdflatex -interaction=nonstopmode "$tex_file" || true
            # Third pass to be sure
            pdflatex -interaction=nonstopmode "$tex_file" || true
          fi
          
          if [ -f "$pdf_file" ]; then
            echo "✅ Successfully compiled: $tex_file -> $pdf_file"
            ls -la "$pdf_file"
          else
            echo "❌ Failed to compile: $tex_file"
            if [ -f "${tex_file%.tex}.log" ]; then
              echo "Error log:"
              tail -n 50 "${tex_file%.tex}.log"
            fi
            SUCCESS=false
          fi
        done
        
        if [ "$SUCCESS" = false ]; then
          echo "One or more compilations failed"
          exit 1
        fi
    
    - name: Commit generated PDFs
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "LaTeX Compiler"
        
        # Add all generated PDF files
        git add *.pdf || true
        
        if ! git diff --staged --quiet; then
          git commit -m "Auto-compile LaTeX: $(date '+%Y-%m-%d %H:%M:%S')"
          git push
          echo "✅ PDFs committed successfully!"
        else
          echo "ℹ️  No changes to commit"
        fi
