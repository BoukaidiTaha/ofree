name: LaTeX Compiler - Complete Setup

on:
  push:
    paths: ['**.tex', '**.bib', '**.cls', '**.sty', '**.yml', '**.yaml']
  workflow_dispatch:

jobs:
  compile:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Cache TeX Live Complete Installation
      id: cache
      uses: actions/cache@v4
      with:
        path: ~/texlive
        key: texlive-complete-v3-${{ runner.os }}
        restore-keys: |
          texlive-complete-v3-
          texlive-complete-
    
    - name: Install TeX Live with comprehensive collections
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        echo "Installing TeX Live with comprehensive package collections..."
        
        # Create installation directory
        mkdir -p ~/texlive-temp
        cd ~/texlive-temp
        
        # Download installer
        wget -q http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz
        tar -xzf install-tl-unx.tar.gz
        
        # Find installer directory
        INSTALL_DIR=$(find . -name "install-tl-2*" -type d | head -1)
        cd "$INSTALL_DIR"
        
        # Create installation profile with more comprehensive scheme
        cat > texlive.profile << 'EOF'
        selected_scheme scheme-medium
        TEXDIR ~/texlive/2023
        TEXMFCONFIG ~/texlive/2023/texmf-config
        TEXMFHOME ~/texlive/2023/texmf
        TEXMFLOCAL ~/texlive/2023/texmf-local
        TEXMFSYSCONFIG ~/texlive/2023/texmf-config
        TEXMFSYSVAR ~/texlive/2023/texmf-var
        TEXMFVAR ~/texlive/2023/texmf-var
        option_adjustrepo 1
        option_autobackup 1
        option_desktop_integration 0
        option_doc 0
        option_file_assocs 0
        option_fmt 1
        option_letter 0
        option_menu_integration 0
        option_path 0
        option_post_code 1
        option_src 0
        option_sys_bin ~/texlive/2023/bin
        option_sys_info ~/texlive/2023/share/info
        option_sys_man ~/texlive/2023/share/man
        option_w32_multi_user 0
        EOF
        
        # Install TeX Live with medium scheme (includes most common packages)
        echo "Installing TeX Live with medium scheme..."
        ./install-tl -profile texlive.profile
        
        # Add to PATH for package installation
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        
        # Install additional collections that cover all major use cases
        echo "Installing comprehensive package collections..."
        
        # Install by collections (most reliable approach)
        ~/texlive/2023/bin/x86_64-linux/tlmgr install \
          collection-mathscience \
          collection-pictures \
          collection-latexextra \
          collection-fontsrecommended \
          collection-langeuropean \
          || echo "Some collections failed, continuing with individual packages..."
        
        # Install specific packages that might not be in collections
        ~/texlive/2023/bin/x86_64-linux/tlmgr install \
          algorithm algorithms algorithmicx algpseudocode \
          listings minted verbatim comment \
          hyperref url xcolor graphicx graphics \
          tikz pgf pgfplots circuitikz \
          booktabs multirow longtable array tabularx colortbl \
          float wrapfig subcaption caption rotating \
          enumitem paralist \
          geometry fancyhdr titlesec titletoc \
          amsmath amsfonts amssymb amsthm mathtools \
          bm physics siunitx units cancel \
          biblatex natbib \
          microtype soul ulem \
          babel inputenc fontenc \
          lipsum blindtext \
          || echo "Some individual packages failed, but continuing..."
        
        # Install engineering and scientific packages
        ~/texlive/2023/bin/x86_64-linux/tlmgr install \
          steinmetz chemmacros mhchem chemfig \
          matlab-prettifier python \
          datatool pgfplotstable sparklines \
          || echo "Some specialized packages failed, but continuing..."
        
        # Clean up installation files
        cd ~
        rm -rf ~/texlive-temp
        
        # Remove documentation to save cache space
        echo "Cleaning up to optimize cache size..."
        find ~/texlive/2023 -name "doc" -type d -exec rm -rf {} + 2>/dev/null || true
        
        echo "TeX Live installation completed!"
        echo "Installation size:"
        du -sh ~/texlive/
        
        echo "Installed packages count:"
        ~/texlive/2023/bin/x86_64-linux/tlmgr list --only-installed | wc -l
    
    - name: Setup TeX Live PATH
      run: |
        # Add TeX Live to PATH
        echo "$HOME/texlive/2023/bin/x86_64-linux" >> $GITHUB_PATH
        
        # Verify installation
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        
        echo "TeX Live setup complete!"
        echo "pdflatex version:"
        pdflatex --version | head -2
        
        echo "Cache status: ${{ steps.cache.outputs.cache-hit }}"
        if [ "${{ steps.cache.outputs.cache-hit }}" = "true" ]; then
          echo "✓ Using cached TeX Live installation!"
          installed_count=$(~/texlive/2023/bin/x86_64-linux/tlmgr list --only-installed 2>/dev/null | wc -l || echo "unknown")
          echo "Packages available: $installed_count"
        else
          echo "✓ Fresh TeX Live installation completed!"
        fi
        
        # Verify key packages are available
        echo "Verifying essential packages:"
        key_packages=("amsmath" "tikz" "pgfplots" "algorithm" "listings" "hyperref" "booktabs" "geometry")
        for pkg in "${key_packages[@]}"; do
          if kpsewhich ${pkg}.sty >/dev/null 2>&1; then
            echo "✓ $pkg"
          else
            echo "✗ $pkg (missing)"
          fi
        done
    
    - name: Compile all LaTeX documents
      run: |
        export PATH="$HOME/texlive/2023/bin/x86_64-linux:$PATH"
        
        echo "Searching for LaTeX documents to compile..."
        
        # Find all main LaTeX files
        MAIN_FILES=()
        if compgen -G "*.tex" > /dev/null; then
          for tex_file in *.tex; do
            if grep -q "\\\\documentclass" "$tex_file"; then
              MAIN_FILES+=("$tex_file")
              echo "Found main document: $tex_file"
            fi
          done
        fi
        
        # Default to main.tex if no main files found
        if [ ${#MAIN_FILES[@]} -eq 0 ] && [ -f "main.tex" ]; then
          MAIN_FILES=("main.tex")
          echo "Using default: main.tex"
        fi
        
        if [ ${#MAIN_FILES[@]} -eq 0 ]; then
          echo "No LaTeX documents found!"
          echo "Looking for files containing \\documentclass..."
          grep -l "\\\\documentclass" *.tex 2>/dev/null || echo "No .tex files with \\documentclass found"
          exit 1
        fi
        
        # Compile each document
        COMPILE_SUCCESS=true
        for tex_file in "${MAIN_FILES[@]}"; do
          echo "================================================"
          echo "Compiling: $tex_file"
          echo "================================================"
          
          pdf_file="${tex_file%.tex}.pdf"
          base_name="${tex_file%.tex}"
          
          # First compilation
          echo "First pass..."
          pdflatex -interaction=nonstopmode -halt-on-error "$tex_file" || {
            echo "Error in first pass, but continuing..."
            pdflatex -interaction=nonstopmode "$tex_file" || true
          }
          
          # Handle bibliography if .bib files exist
          if compgen -G "*.bib" > /dev/null && [ -f "${base_name}.aux" ]; then
            echo "Running bibtex..."
            bibtex "$base_name" || echo "BibTeX had warnings/errors, continuing..."
          fi
          
          # Second and third passes for cross-references
          if [ -f "${base_name}.aux" ]; then
            echo "Second pass..."
            pdflatex -interaction=nonstopmode "$tex_file" || echo "Second pass had warnings, continuing..."
            echo "Third pass..."
            pdflatex -interaction=nonstopmode "$tex_file" || echo "Third pass had warnings, continuing..."
          fi
          
          # Check compilation result
          if [ -f "$pdf_file" ]; then
            echo "✓ Successfully compiled: $tex_file → $pdf_file"
            echo "PDF size: $(ls -lh "$pdf_file" | awk '{print $5}')"
          else
            echo "✗ Failed to compile: $tex_file"
            if [ -f "${base_name}.log" ]; then
              echo "Last 30 lines of log file:"
              tail -n 30 "${base_name}.log"
            fi
            COMPILE_SUCCESS=false
          fi
        done
        
        echo "================================================"
        echo "Compilation Summary"
        echo "================================================"
        
        for tex_file in "${MAIN_FILES[@]}"; do
          pdf_file="${tex_file%.tex}.pdf"
          if [ -f "$pdf_file" ]; then
            echo "✓ $tex_file → $pdf_file"
          else
            echo "✗ $tex_file → FAILED"
          fi
        done
        
        if [ "$COMPILE_SUCCESS" = false ]; then
          echo "Some compilations failed!"
          exit 1
        else
          echo "All compilations successful!"
        fi
    
    - name: Commit generated PDFs
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "LaTeX Compiler"
        
        # Add all PDF files
        git add *.pdf 2>/dev/null || true
        
        if ! git diff --staged --quiet 2>/dev/null; then
          CHANGED_FILES=$(git diff --staged --name-only | tr '\n' ' ')
          git commit -m "Auto-compile LaTeX: $(date '+%Y-%m-%d %H:%M:%S')

Generated PDFs: $CHANGED_FILES"
          git push
          echo "✓ PDFs committed and pushed successfully!"
          echo "Updated files: $CHANGED_FILES"
        else
          echo "ℹ No changes to commit"
        fi
